"vunlde.vimで管理してるpluginを読み込む

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Edit {{{
  " NERD_commenter.vim :最強コメント処理 (<Leader>c<space>でコメントをトグル)
  Bundle 'scrooloose/nerdcommenter.git'

  " -- でメソッドチェーン整形
  Bundle 'c9s/cascading.vim'

  " visually indent guide
  Bundle 'nathanaelkane/vim-indent-guides'

  " XMLとかHTMLとかの編集機能を強化する
  Bundle 'xmledit'

  " Align : 高機能整形・桁揃えプラグイン
  Bundle 'Align'

  " フィルタリングと整形
  Bundle 'godlygeek/tabular'

  " マルチバイト対応の整形
  Bundle 'h1mesuke/vim-alignta'

  " YankRing.vim : ヤンクの履歴を管理し、順々に参照、出力できるようにする
  Bundle 'YankRing.vim'

  " undo履歴を追える (need python support)
  Bundle 'Gundo'

  " surround.vim : テキストを括弧で囲む／削除する
  Bundle 'tpope/vim-surround'

  " smartchr.vim : ==などの前後を整形
  Bundle 'smartchr'

  " vim-operator-user : 簡単にoperatorを定義できるようにする
  Bundle 'operator-user'

  " operator-camelize : camel-caseへの変換
  Bundle 'operator-camelize'

  " operator-replace : yankしたものでreplaceする
  Bundle 'operator-replace'

  " textobj-user : 簡単にVimエディタのテキストオブジェクトをつくれる
  Bundle 'textobj-user'

  " vim-textobj-syntax : syntax hilightされたものをtext-objectに
  Bundle 'kana/vim-textobj-syntax.git'

  " vim-textobj-plugins : いろんなものをtext-objectにする
  Bundle 'thinca/vim-textobj-plugins.git'

  " vim-textobj-lastpat : 最後に検索されたパターンをtext-objectに
  Bundle 'kana/vim-textobj-lastpat.git'

  " vim-textobj-indent : インデントされたものをtext-objectに
  Bundle 'kana/vim-textobj-indent.git'

  " vim-textobj-function : 関数の中身をtext-objectに
  Bundle 'kana/vim-textobj-function.git'

  " vim-textobj-fold : 折りたたまれたアレをtext-objectに
  " Bundle 'kana/vim-textobj-fold.git'
  Bundle 'textobj-rubyblock'

  " vim-textobj-entire : buffer全体をtext-objectに
  Bundle 'textobj-entire'

  " 「foo」 or 【bar】などをtext-objectに
  Bundle 'textobj-jabraces'

" }}}

" Completion {{{
  " 補完 neocomplcache.vim : 究極のVim的補完環境
  Bundle 'Shougo/neocomplcache'

  " neocomplcacheのsinpet補完
  Bundle 'Shougo/neosnippet'

" }}}

" Searching/Moving{{{
  " smooth_scroll.vim : スクロールを賢く
  Bundle 'Smooth-Scroll'

  " vim-smartword : 単語移動がスマートな感じで
  Bundle 'smartword'

  " camelcasemotion : CamelCaseやsnake_case単位でのワード移動
  Bundle 'camelcasemotion'

  " <Leader><Leader>w/fなどで、motion先をhilightする
  Bundle 'EasyMotion'

  " matchit.vim : 「%」による対応括弧へのカーソル移動機能を拡張
  Bundle 'matchit.zip'

  " ruby用のmatchit拡張
  Bundle 'ruby-matchit'

  " grep.vim : 外部のgrep利用。:Grepで対話形式でgrep :Rgrepは再帰
  Bundle 'grep.vim'

  " eregex.vim : vimの正規表現をrubyやperlの正規表現な入力でできる :%S/perlregex/
  Bundle 'eregex.vim'

  " open-browser.vim : カーソルの下のURLを開くor単語を検索エンジンで検索
  Bundle 'tyru/open-browser.vim'

" }}}

" Programming {{{
  " quickrun.vim : 編集中のファイルを簡単に実行できるプラグイン
  Bundle 'thinca/vim-quickrun'

  " perldocやphpmanual等のリファレンスをvim上で見る
  Bundle 'thinca/vim-ref'

  " SQLUtilities : SQL整形、生成ユーティリティ
  Bundle 'SQLUtilities'

  " vim-ruby : VimでRubyを扱う際の最も基本的な拡張機能
  Bundle 'ruby.vim'

  " Pydiction : Python用の入力補完
  Bundle 'Pydiction'

  " ソースコード上のメソッド宣言、変数宣言の一覧を表示
  Bundle 'taglist.vim'

" }}}
"
" Syntax {{{
  " haml
  Bundle 'haml.zip'

  " JavaScript
  Bundle 'JavaScript-syntax'

  " jQuery
  Bundle 'jQuery'

  " nginx conf
  Bundle 'nginx.vim'

  " markdown
  Bundle 'tpope/vim-markdown'

  " syntax checking plugins exist for eruby, haml, html, javascript, php, python, ruby and sass.
  Bundle 'scrooloose/syntastic'
" }}}

" Buffer {{{
  " DumbBuf.vim : quickbufっぽくbufferを管理。 "<Leader>b<Space>でBufferList
  Bundle 'DumbBuf'

  " NERDTree : ツリー型エクスプローラ
  Bundle 'The-NERD-tree'

  " vtreeexplorer.vim : ツリー状にファイルやディレクトリの一覧を表示
  Bundle 'vtreeexplorer'
" }}}

" Encording {{{
  Bundle 'banyan/recognize_charcode.vim'
" }}}

" Utility {{{

  " vim-altercmd : Ex command拡張
  Bundle 'tyru/vim-altercmd'

  " vim Interface to Web API
  Bundle 'mattn/webapi-vim'

  " cecutil.vim : 他のpluginのためのutillity1
  Bundle 'cecutil'

  " utillity
  Bundle 'L9'

  " Buffer管理のLibrary
  Bundle 'thinca/vim-openbuf'

  " Lingrのclient
  Bundle 'tsukkee/lingr-vim'

  " vimからGit操作する
  Bundle 'tpope/vim-fugitive'

  " ステータスラインをカッコよくする
  Bundle 'Lokaltog/vim-powerline'

  " Toggle
  Bundle 'taku-o/vim-toggle'

  " Showmarks
  "Bundle 'ShowMarks7'

" }}}

" ColorSchema{{{
  " color schema 256
  Bundle 'desert256.vim'
  Bundle 'mrkn256.vim'
  Bundle 'tomasr/molokai'
  Bundle 'altercation/vim-colors-solarized'
" }}}

" Unite {{{
  Bundle 'wincent/Command-T'
  Bundle 'Shougo/unite.vim'
  Bundle 'tsukkee/unite-help'
  Bundle 'h1mesuke/unite-outline'
  Bundle 'basyura/unite-rails'
  Bundle 'thinca/vim-unite-history'
  Bundle 'tsukkee/unite-tag'
  Bundle 'choplin/unite-vim_hacks'
" }}}

" Vundle {{{
Bundle 'gmarik/vundle'
"}}}

filetype plugin indent on

" Plugin Settings {{{
"------------------------------------
" MiniBufExplorer
"------------------------------------
"set minibfexp
let g:miniBufExplMapWindowNavVim=1 "hjklで移動
let g:miniBufExplSplitBelow=0  " Put new window above
let g:miniBufExplMapWindowNavArrows=1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplSplitToEdge=1
let g:miniBufExplMaxSize = 10
let g:miniBufExplorerMoreThanOne=2

":MtでMiniBufExplorerの表示トグル
command! Mt :TMiniBufExplorer

"------------------------------------
" Align
"------------------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"------------------------------------
" VTreeExplorer
"------------------------------------
" 縦に表示する
let g:treeExplVertical=1

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x, c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'
-
"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" Fugitive.vim
"------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"------------------------------------
" VTreeExplorer
"------------------------------------
let g:treeExplVertical=1
"<Leader>t<Space>でディレクトリツリー表示
noremap <Leader>t<Space> :VSTreeExplore<CR>
"分割したウィンドウのサイズ
let g:treeExplWinSize=30

"------------------------------------
" DumbBuf.vim
"------------------------------------
"<Leader>b<Space>でBufferList
let dumbbuf_hotkey = '<Leader>b<Space>'
let dumbbuf_mappings = {
    \ 'n': {
        \'<Esc>': { 'opt': '<silent>', 'mapto': ':<C-u>close<CR>' }
    \}
\}
let dumbbuf_single_key  = 1
let dumbbuf_updatetime  = 1    " &updatetimeの最小値
let dumbbuf_wrap_cursor = 0
let dumbbuf_remove_marked_when_close = 1

"------------------------------------
" vim-indent-guides
"------------------------------------
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 4
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
endif

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags
set tags+=~/.tags
"let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags' " ctagsのパス
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
nmap <F7> :Tlist<CR>

"------------------------------------
" Srcexp
"------------------------------------
" [Srcexpl] tagsを利用したソースコード閲覧・移動補助機能
let g:SrcExpl_UpdateTags    = 1         " tagsをsrcexpl起動時に自動で作成（更新）
let g:SrcExpl_RefreshTime   = 0         " 自動表示するまでの時間(0:off)
let g:SrcExpl_WinHeight     = 9         " プレビューウインドウの高さ
let g:SrcExpl_RefreshMapKey = "<Space>" " 手動表示のMAP
let g:SrcExpl_GoBackMapKey  = "<C-b>"   " 戻る機能のMAP
" Source Explorerの機能ON/OFF
" nmap <F8> :CMiniBufExplorer<CR>:SrcExplToggle<CR>:TMiniBufExplorer<CR>

"------------------------------------
" open-blowser.vim
"------------------------------------

" カーソル下のURLをブラウザで開く
nmap <Leader>fu <Plug>(openbrowser-open)
vmap <Leader>fu <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap <Leader>fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"------------------------------------
" operator-camelize.vim
"------------------------------------
" camel-caseへの変換
map <Leader>u <Plug>(operator-camelize)
map <Leader>U <Plug>(operator-decamelize)

"------------------------------------
" operator-replace.vim
"------------------------------------
" RwなどでYankしてるもので置き換える
map R <Plug>(operator-replace)

"------------------------------------
" sumartword.vim
"------------------------------------
noremap ,w  w
noremap ,b  b
noremap ,e  e
noremap ,ge  ge

map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)


"------------------------------------
" camelcasemotion.vim
"------------------------------------

" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    U [unite]

nnoremap [unite]U  :<C-u>Unite -no-split<Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

let g:yankring_zap_keys = ""
" from basyura/unite-rails
nnoremap <silent> [unite]rm  :<C-u>Unite -no-split rails/model<CR>
nnoremap <silent> [unite]rc  :<C-u>Unite -no-split rails/controller<CR>
nnoremap <silent> [unite]rv  :<C-u>Unite -no-split rails/view<CR>
nnoremap <silent> [unite]rl  :<C-u>Unite -no-split rails/lib<CR>
nnoremap <silent> [unite]rj  :<C-u>Unite -no-split rails/javascript<CR>
nnoremap <silent> [unite]rs  :<C-u>Unite -no-split rails/spec<CR>


autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
" quickrun.vim
"------------------------------------
let g:quickrun_config = {}
"------------------------------------
" Pydiction
"------------------------------------
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1

"------------------------------------
" NERD-Tree.vim
"------------------------------------
nnoremap <Leader>n :NERDTree<CR>
let NERDTreeShowHidden=1


"------------------------------------
" taku-o/toggle.vim
"------------------------------------
let g:toggle_pairs = { 'todo':'prcss', 'prcss':'done', 'done':'todo' }



"------------------------------------
" solarized
"------------------------------------
call togglebg#map("<f5>")
"set t_Co=16
let g:solarized_termcolors=3
let g:solarized_termtrans=0
let g:solarized_degrade=0
let g:solarized_bold=1
let g:solarized_underline=1
let g:solarized_italic=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
"colorschem solarized

" }}}
