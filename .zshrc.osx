export PATH=/usr/local/bin:/usr/local/sbin:$PATH
export PATH=/opt/local/bin:/opt/local/sbin:~/bin:$PATH

# Terminal Colorの設定
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad

## vim
export EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim
alias vi='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
alias vimdiff='~/Applications/MacVim.app/Contents/MacOS/vimdiff'
alias view='~/Applications/MacVim.app/Contents/MacOS/view'
export PATH=~/Applications/Vagrant/bin/:$PATH
export PATH=/Applications/MacVim.app/Contents/MacOS:$PATH
export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"

# ctags
alias ctags='/Applications/MacVim.app/Contents/MacOS/ctags "$@"'

# script alias
alias mi="open $1 -a ~/Applications/mi.app/Contents/MacOS/mi"
alias sourcetree='open -a SourceTree'
alias st='sourcetree .'

# Ruby
eval "$(rbenv init - zsh)"

# hub command
eval "$(hub alias -s)"

# GNU cp
# required: brew install coreutils
alias cp="nocorrect gcp -i"

# Go
export GOPATH="$HOME/.go/"
export PATH=$GOPATH/bin:$PATH

# commands
alias tmux="env TERM=screen-256color-bce tmux" #keep vim colorscheme in tmux mode
alias tma='env TERM=screen-256color-bce tmux attach'
alias lst='tmux ls'
alias tls='tmux ls'
alias ssh256='env TERM=xterm-256color /usr/bin/ssh'
alias rename='tmux rename-session'
alias renamew='tmux rename-window'
alias tailf='tail -f'
alias p='pbcopy'

function todo() {
    if [[ $1 == "add" && -n $2 ]] then
        task $@ +todo
        exit 0
    else
        task list +todo
    fi
}

function pro() {
    if [ $1 ]; then
        project=$1
        shift
        if [[ $1 == "add" ]]; then
            shift
            task add $@ project:$project
        else
            task wait project:$project $@
        fi
    else
        task project
    fi
}


function pwdcopy() {
    echo -n $(pwd) | pbcopy
}


function here() {
    tmux rename-window $(basename `pwd`)
}

function dic() {
    w3m "http://ejje.weblio.jp/content/$1" | grep "用例"
}

# open current directory in Finder
alias f='open .'

# cd to the path of the front Finder window
function cdf() {
  target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
  if [ "$target" != "" ]; then
    cd "$target"; pwd
  else
    echo 'No Finder window found' >&2
  fi
}

[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

function memo() {
    today=$(date "+%Y%m%d")
    memofile=memo-${today}.md
    memofile_past=$(find * -type f | grep "memo-" | grep ".md" | sort | tail -1)
    # tmux rename-window "memo"

    if [[ -f $memofile_past && $memofile != $memofile_past ]]; then
        # vim $memofile_past $memofile -c "vs" -c "bn" -c "NERDTreeToggle" -c "wincmd ="
        vim $memofile_past $memofile -c "vs" -c "bn" -c "wincmd ="
    else
        vim $memofile
    fi

    #tmux rename-window $(basename `pwd`)
    #vim ~/projects/0.TODAY/$todofile $todofile -c "vs" -c "bn" -c "NERDTreeToggle" -c "wincmd ="
}

alias mtodo='mvim todo-$(date "+%Y%m%d").md'

alias -g C="| tr -d '\n' | pbcopy"



function lnw() {
    project_path=~/workspace/${1:?}
    if [ -d $project_path ]; then
        ln -s $project_path .
    else
        echo "[Error] Project not found." 1>&2
        echo "------------------------"
        ls ~/workspace/
    fi
}

